name: Build and Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Check and Create ECR Repository
        run: |
          ECR_REPOSITORY_NAME="demo"
          REPO_EXISTS=$(aws ecr describe-repositories --repository-names $ECR_REPOSITORY_NAME --region us-east-1 --query 'repositories[0].repositoryName' --output text 2>/dev/null || echo "MISSING")
          if [ "$REPO_EXISTS" == "MISSING" ]; then
            echo "Repository $ECR_REPOSITORY_NAME does not exist. Creating..."
            aws ecr create-repository --repository-name $ECR_REPOSITORY_NAME --region us-east-1
          else
            echo "Repository $ECR_REPOSITORY_NAME already exists. Skipping creation."
          fi

      - name: Build, Tag, and Push Images to Amazon ECR
        id: build-and-push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: demo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          DOCKERFILES=$(find . -name 'Dockerfile*')
          > image-uris.txt
          
          for DOCKERFILE in $DOCKERFILES; do
            BASENAME=$(basename $DOCKERFILE)
            TAG=${BASENAME//Dockerfile_/}
            TAG=${TAG:-default}
            
            IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$TAG-$IMAGE_TAG"
            
            echo "Building and pushing Docker image for $DOCKERFILE to $IMAGE_URI"
            
            docker build -f $DOCKERFILE -t $IMAGE_URI .
            docker push $IMAGE_URI
            
            echo "$TAG:$IMAGE_URI" >> image-uris.txt
          done
          # Set IMAGE_URI output
          echo "::set-output name=image_uri::$IMAGE_URI"

      - name: Verify Image URIs
        run: |
          echo "Contents of image-uris.txt:"
          cat image-uris.txt

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli
          aws --version

      # Create IAM Role for ECS Task and Fetch ARN
      - name: Create IAM Role for ECS Task and Fetch ARN
        id: create-iam-role
        run: |
          ROLE_NAME="ecsTaskExecutionRole"
          ROLE_EXISTS=$(aws iam get-role --role-name $ROLE_NAME --query 'Role.RoleName' --output text 2>/dev/null || echo "false")
          
          if [ "$ROLE_EXISTS" != "$ROLE_NAME" ]; then
            echo "Creating IAM role '$ROLE_NAME'..."
            aws iam create-role --role-name $ROLE_NAME --assume-role-policy-document '{
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ecs-tasks.amazonaws.com"
                        },
                        "Action": "sts:AssumeRole"
                    }
                ]
            }'
          else
            echo "IAM role '$ROLE_NAME' already exists. Skipping creation."
          fi

          # Attach the first policy if not already attached
          POLICY_EXISTS=$(aws iam list-attached-role-policies --role-name $ROLE_NAME --query 'AttachedPolicies[?PolicyName==`ECSServicePolicy`].PolicyName' --output text 2>/dev/null || echo "false")
          
          if [ "$POLICY_EXISTS" != "ECSServicePolicy" ]; then
            echo "Attaching policy 'ECSServicePolicy'..."
            aws iam put-role-policy --role-name $ROLE_NAME --policy-name ECSServicePolicy --policy-document '{
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ecs:UpdateService",
                            "ecs:DescribeServices",
                            "ecs:DescribeTasks",
                            "ecr:GetAuthorizationToken",
                            "ecr:BatchCheckLayerAvailability",
                            "ecr:GetDownloadUrlForLayer",
                            "ecr:BatchGetImage",
                            "sts:GetCallerIdentity"
                        ],
                        "Resource": "*"
                    }
                ]
            }'
          else
            echo "Policy 'ECSServicePolicy' already attached. Skipping attachment."
          fi

          # Attach the second policy if not already attached
          POLICY_EXISTS=$(aws iam list-attached-role-policies --role-name $ROLE_NAME --query 'AttachedPolicies[?PolicyName==`ECRLoggingPolicy`].PolicyName' --output text 2>/dev/null || echo "false")
          
          if [ "$POLICY_EXISTS" != "ECRLoggingPolicy" ]; then
            echo "Attaching policy 'ECRLoggingPolicy'..."
            aws iam put-role-policy --role-name $ROLE_NAME --policy-name ECRLoggingPolicy --policy-document '{
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ecr:GetAuthorizationToken",
                            "ecr:BatchCheckLayerAvailability",
                            "ecr:GetDownloadUrlForLayer",
                            "ecr:BatchGetImage",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"
                        ],
                        "Resource": "*"
                    }
                ]
            }'
          else
            echo "Policy 'ECRLoggingPolicy' already attached. Skipping attachment."
          fi

          # Fetch and output the IAM Role ARN
          ROLE_ARN=$(aws iam get-role --role-name $ROLE_NAME --query 'Role.Arn' --output text)
          echo "IAM Role ARN: $ROLE_ARN"
          echo "::set-output name=role_arn::$ROLE_ARN"

      - name: Create S3 Bucket for Robot Framework Results
        id: create-s3-bucket
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BUCKET_NAME="my-robot-results-bucket-$TIMESTAMP"
          echo "Using bucket name: $BUCKET_NAME"
      
          if ! aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
            echo "Bucket does not exist. Creating bucket..."
            aws s3api create-bucket --bucket $BUCKET_NAME --region us-east-1
            if [ $? -eq 0 ]; then
              echo "Bucket $BUCKET_NAME created successfully."
            else
              echo "Failed to create bucket $BUCKET_NAME."
              exit 1
            fi
          else
            echo "Bucket $BUCKET_NAME already exists. Skipping creation."
          fi
          echo "::set-output name=bucket_name::$BUCKET_NAME"

      - name: Create Log Group
        run: |
          aws logs create-log-group --log-group-name /ecs/my-task || true

      - name: Register ECS Task Definition
        run: |
          aws ecs register-task-definition \
            --family my-task \
            --network-mode awsvpc \
            --execution-role-arn "${{ steps.create-iam-role.outputs.role_arn }}" \
            --container-definitions '[
              {
                "name": "my-container",
                "image": "${{ steps.build-and-push.outputs.image_uri }}",
                "cpu": 256,
                "memory": 512,
                "essential": true,
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/my-task",
                    "awslogs-region": "us-east-1",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]'

      - name: Create ECS Service
        run: |
          SERVICE_NAME="my-service"
          CLUSTER_NAME="my-cluster"
          
          # Check if the ECS service already exists
          EXISTING_SERVICE=$(aws ecs describe-services --services $SERVICE_NAME --cluster $CLUSTER_NAME --query 'services[0].serviceName' --output text 2>/dev/null || echo "null")
          
          if [ "$EXISTING_SERVICE" == "$SERVICE_NAME" ]; then
            echo "ECS service $SERVICE_NAME already exists. Updating service..."
            aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment
          else
            echo "Creating ECS service $SERVICE_NAME..."
            aws ecs create-service \
              --service-name $SERVICE_NAME \
              --cluster $CLUSTER_NAME \
              --task-definition my-task \
              --desired-count 1 \
              --launch-type EC2
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      - name: Run ECS Task
        run: |
          aws ecs run-task \
            --cluster my-cluster \
            --launch-type EC2 \
            --task-definition my-task

      - name: Upload Logs to S3
        run: |
          BUCKET_NAME="${{ steps.create-s3-bucket.outputs.bucket_name }}"
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          aws s3 cp log/ "s3://$BUCKET_NAME/logs-$TIMESTAMP/" --recursive
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
