name: Build, Push Docker Images, and Deploy to ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure all tags are fetched

      - name: Install dos2unix
        run: sudo apt-get install -y dos2unix

      - name: Convert line endings
        run: dos2unix ./build/git_update.sh

      - name: List build directory contents
        run: ls -alh build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          chmod +x ./build/git_update.sh
          ./build/git_update.sh -v major

      - name: Debug Dockerfile Paths
        run: |
          DOCKERFILES=$(find . -name 'Dockerfile*')
          echo "Found Dockerfiles:"
          echo "$DOCKERFILES"

      - name: Build, Tag, and Push Images to Amazon ECR
        id: build-and-push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: demo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Find all Dockerfiles in the repository
          DOCKERFILES=$(find . -name 'Dockerfile*')
          > image-uris.txt  # Clear or create a file to store image URIs
          
          # Loop through the Dockerfiles and build/push images
          for DOCKERFILE in $DOCKERFILES; do
            # Extract the name part for tagging
            BASENAME=$(basename $DOCKERFILE)
            TAG=${BASENAME//Dockerfile_/}
            TAG=${TAG:-default}  # Fallback to 'default' if no specific tag
            
            IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$TAG-$IMAGE_TAG"
            
            echo "Building and pushing Docker image for $DOCKERFILE to $IMAGE_URI"
            
            # Build the Docker image
            docker build -f $DOCKERFILE -t $IMAGE_URI .
            
            # Push the Docker image to ECR
            docker push $IMAGE_URI
            
            echo "IMAGE $IMAGE_URI is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
            
            # Save the image URI to a file
            echo "$TAG:$IMAGE_URI" >> image-uris.txt
          done

      - name: Verify Image URIs
        run: |
          echo "Contents of image-uris.txt:"
          cat image-uris.txt

      - name: Create ECS Cluster
        run: |
          CLUSTER_NAME="my-ecs-cluster"
          aws ecs create-cluster --cluster-name $CLUSTER_NAME || echo "Cluster already exists"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      - name: Register ECS Task Definition
        run: |
          TASK_DEFINITION_FILE="ecs-task-definition.json"
          aws ecs register-task-definition --cli-input-json file://$TASK_DEFINITION_FILE
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      - name: Create or Update ECS Service
        run: |
          CLUSTER_NAME="my-ecs-cluster"
          SERVICE_NAME="my-ecs-service"
          TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition "my-task-definition" --query "taskDefinition.taskDefinitionArn" --output text)
          
          # Check if the service exists
          SERVICE_EXISTS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[0].serviceName" --output text)

          if [ "$SERVICE_EXISTS" == "$SERVICE_NAME" ]; then
            echo "Updating existing ECS service..."
            aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $TASK_DEFINITION_ARN --force-new-deployment
          else
            echo "Creating new ECS service..."
            aws ecs create-service --cluster $CLUSTER_NAME --service-name $SERVICE_NAME --task-definition $TASK_DEFINITION_ARN --desired-count 1
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      - name: Create S3 Bucket for Robot Framework Results
        run: |
          BUCKET_NAME="my-robot-results-bucket"
          if ! aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
            echo "Bucket does not exist. Creating bucket..."
            aws s3api create-bucket --bucket $BUCKET_NAME --region us-east-1
          else
            echo "Bucket already exists. Skipping creation."
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      - name: Run Robot Framework Tests
        run: |
          docker run --rm \
          -v $PWD:/robot \
          -w /robot \
          ${{ steps.build-and-push.outputs.IMAGE_URI }}
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Retrieve Log HTML from CloudWatch
        run: |
          LOG_GROUP_NAME="/ecs/my-task"
          LOG_STREAM_PREFIX="ecs"
          LOG_STREAM_NAME=$(aws logs describe-log-streams --log-group-name "$LOG_GROUP_NAME" --log-stream-name-prefix "$LOG_STREAM_PREFIX" --query 'logStreams[0].logStreamName' --output text)

          if [ -n "$LOG_STREAM_NAME" ]; then
            echo "Retrieving logs from CloudWatch..."
            aws logs get-log-events --log-group-name "$LOG_GROUP_NAME" --log-stream-name "$LOG_STREAM_NAME" --limit 1000 --query 'events[*].message' --output text > ecs-log.txt
            # Extract the HTML report if itâ€™s part of the log
            grep -oP '.*\.html' ecs-log.txt > log.html
            cat log.html
          else
            echo "No log stream found!"
            exit 1
          fi
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Upload Robot Framework `log.html` to S3
        run: |
          aws s3 cp log.html s3://my-robot-results-bucket/robot-results/log.html --region us-east-1
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
